from keras import backend as K
import math

class Config:

    def __init__(self):
        
        #common user defined information
        
        #path to the training data
        self.train_path = r'C:\Data_drive\workspace\FRCNN'
        
        #number of epochs to train
        self.num_epochs = 15
        
        # number of ROIs at once
        self.num_rois = 200
        
        self.output_weight_path = r'C:\Data_drive\workspace\FRCNN\model.hdf5'
        
        #path to the input weights. If trainining for the first time use None to load imagenet weights
        self.input_weight_path = None
        
        self.batch_size = 5
        
        
        
        
        self.verbose = True
  
        self.network = 'resnet50'
  
        # setting for data augmentation
        self.use_horizontal_flips = False
        self.use_vertical_flips = False
        self.rot_90 = False
  
        # anchor box information
        self.anchor_box_scales = [5, 10, 20, 50, 100]
        self.anchor_box_ratios = [[1, 1], [1./math.sqrt(2), 2./math.sqrt(2)], [2./math.sqrt(2), 1./math.sqrt(2)]]
  
        # size to resize the smallest side of the image
        self.im_size = 500
  
        # image channel-wise mean to subtract
        self.img_channel_mean = [103.939, 116.779, 123.68] #[R, G, B]
        self.img_scaling_factor = 1.0
  
  
  
        # stride at the RPN (this depends on the network configuration)
        self.rpn_stride = 16
  
        self.balanced_classes = False
  
        # scaling the stdev
        self.std_scaling = 1.0
        self.classifier_regr_std = [1.0, 1.0, 1.0, 1.0]
  
        # overlaps for RPN
        self.rpn_min_overlap = 0.3
        self.rpn_max_overlap = 0.7
  
        # overlaps for classifier ROIs
        self.classifier_min_overlap = 0.1
        self.classifier_max_overlap = 0.5
  
        # placeholder for the class mapping, automatically generated by the parser
        self.class_mapping = None
  
        self.model_path = 'model_frcnn.resnet.hdf5'
